#+PROPERTY: header-args :results silent
#+TITLE: Config
* Boiler plate

#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
(setq user-full-name "Gatlee Kaw"
      user-mail-address "gatlee.kaw@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-unicode-font' -- for unicode glyphs
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;

(setq doom-font (font-spec :family "MonoLisa" :size 11 :weight 'normal))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src
* Set local leader key

#+begin_src emacs-lisp
(setq doom-localleader-key ",")
#+end_src
* Org Stuff
** Roam
This stuff is from
https://github.com/CeleritasCelery/emacs.d/blob/master/emacs.org
https://coredumped.dev/2021/05/26/taking-org-roam-everywhere-with-logseq/
- [ ] Make better keybindings
#+begin_src emacs-lisp
(setq org-directory "~/OrgFiles/")
(setq org-roam-directory "~/OrgFiles")
(setq org-roam-dailies-directory "journals/")
(setq org-roam-capture-templates
          '(("d" "default" plain
             "%?" :target
             (file+head "${slug}.org" "#+title: ${title}\n")))
          org-roam-dailies-capture-templates
          '(("d" "default" entry
             "* %?" :target
             (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n%x"))))
#+end_src

#+begin_src emacs-lisp
(defun gat/commit-with-date ()
  (interactive)
  (magit-stage-untracked)
  (magit-stage-modified)
  (magit-commit-create)
  (insert (format-time-string "%D %-I:%M %p")))

#+end_src


* Appearance
** TODO Smooth Scrolling [WIP]
Emacs 29 introduces pixel-scroll-precision mode. This works great for scrolling up and down with a trackpad on MacOS
However, I would like to introduce this to the C-u and C-d commands in evil mode for aesthetic reasons.

However, pixel-scroll mode accepts a pixel count as it's parameter while C-u and C-d move by line counts.
We need to accurately convert these two to replicate the functionality

Doom emacs doesn't support emacs 29 yet so this will have to wait until there's better support

#+begin_src emacs-lisp
(setq pixel-scroll-precision-mode t)
(setq pixel-scroll-precision-interpolate-page t)

(defun gat/get-half-page ()
  (window-body-height (selected-window) t))

(defun gat/scroll-half-page-up ()
  (interactive)
  (if pixel-scroll-precision-interpolate-page
      (pixel-scroll-precision-interpolate (gat/get-half-page))
    (evil-scroll-up 0)))

(defun gat/scroll-half-page-down ()
  (interactive)
  (if pixel-scroll-precision-interpolate-page
      (pixel-scroll-precision-interpolate (- (gat/get-half-page)))
    (evil-scroll-down 0)))

(map! :n "C-u" 'evil-scroll-up
      :n "C-d" 'evil-scroll-down)

#+end_src
** Theming
#+begin_src emacs-lisp
;;TODO use device-eval

(setq gat/light-theme 'doom-gruvbox-light)
(setq gat/dark-theme 'doom-rouge)

(setq doom-theme gat/dark-theme)

(defun gat/next-theme ()
  "Toggles between poet themes"
  (interactive)
  (if (custom-theme-enabled-p gat/dark-theme)
      (load-theme gat/light-theme)
    (load-theme gat/dark-theme)))

(map! :leader "Tn" 'gat/next-theme )
#+end_src


** Which Key
Make which key more responsive

#+begin_src emacs-lisp
(setq which-key-idle-delay 0.333)
(setq which-key-idle-secondary-delay 0)
#+end_src
* Clojure
#+begin_src emacs-lisp
(map! :map 'clojure-mode-map
      :n ">)" 'paredit-forward-slurp-sexp
      :n "<(" 'paredit-backward-slurp-sexp
      :n "<)" 'paredit-forward-barf-sexp
      :n ">(" 'paredit-backward-barf-sexp
      :i "C-h" 'paredit-forward-barf-sexp
      :i "C-l" 'paredit-forward-slurp-sexp)

#+end_src
* Ivy
#+begin_src emacs-lisp
(map! :after ivy
      :map ivy-mode-map
      :g "<C-return>" #'ivy-immediate-done)

#+end_src
